<?xml version="1.0" encoding="UTF-8"?>

<!--
	XSLT to post-process XSDs generated by EA MDG Technology for GML

	Created by B.L. Choy (blchoy.hko@gmail.com).  First created on 29 March 2016.  Last updated on 16 July 2021.

	To be installed under "Resources/Stylesheets" and activited by selecting the stylesheet in "Generate GML Application Schema" window

	Tested with EA 12.1 Build 1224
-->

<!--
	EA GML transformation issues:

	(1) For UML classes of stereotype <<codeList>>, as their XSD counterparts are solely for inclusion as XSD attributes, only the types defined are required but not the element
	(2) Missing 'use="required"' in XSD attributes whose UML counterparts has a multiplicity of [1] (i.e.mandatory)
	(3) Even though an attribute of an UML class or the target role of an association has a tagged value 'nillable="true"', this was not reflected in its XSD counterpart (see Section 8.2.3.2 of ISO 19136:2007)
	(4) Generalizatiosn to GML primitives are ignored.  This is not a bug but being able to do this is an "illegal convenience"
	(5) (Tagged value 'xsdAsAttribute="true"') The types of UML object able to be serialized as XSD attributes are somewhat limited.  Currently this is rectified by CMLClassMapping.xml
	(6) Notes to an attribute of an UML object is not copied to the corresponding XSD attribute.  This is not a GML requirement (see Section E.2.4.12 of ISO19136:2007 documentation) but essential to schema readers
	(7) xsl:namespace is not working in the stylesheet processor of EA12.1, even though it is claimed to conform to XSLT 2.0 requirements
	(8) Self associations of an UML class are not transformed to their XSD counterparts
	(9) The METCE specific serialization of <quantity> element implemented in EA covers UML classes with stereotype <<Type>> and <<DataType>> only
-->

<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes=" xs"> 

	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>

	<!-- Identity transform with removal of default namespace xs: -->
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/2001/XMLSchema" match="xs:*">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select='namespace::*[not(. = namespace-uri(current()))]' />
			<xsl:apply-templates select='@*|node()' />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:gml="http://www.opengis.net/gml/3.2" match="*">
		<xsl:element name="{name()}">
			<xsl:copy-of select='namespace::*[not(namespace-uri(.) = "")][not(. = "http://www.w3.org/2001/XMLSchema")]' />
			<xsl:apply-templates select='@*|node()' />
		</xsl:element>
	</xsl:template>
	<xsl:template match="@*">
		<xsl:attribute name="{local-name()}">
			<xsl:value-of select="."/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="@type[substring(.,1,3)='xs:']">
		<xsl:attribute name="type">
			<xsl:value-of select="substring-after(.,'xs:')"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="@base[substring(.,1,3)='xs:']">
		<xsl:attribute name="base">
			<xsl:value-of select="substring-after(.,'xs:')"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="text() | processing-instruction()">
        	<xsl:copy/>
	</xsl:template>

	<!-- Add disclaimer -->
	<!-- Disabled as the text has been included in the model already -->
	<!--
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:schema/xs:annotation/xs:documentation">
		<documentation>References to WMO and ICAO Technical Regulations within this XML schema shall have no formal status and are for information purposes only. Where there are differences between the Technical Regulations and the schema, the Technical Regulations shall take precedence. Technical Regulations may impose requirements that are not described in this schema.</documentation>
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select='namespace::*[not(. = namespace-uri(current()))]' />
			<xsl:apply-templates select='@*|node()' />
		</xsl:element>
	</xsl:template>
	-->

	<!-- Remove substitutionGroup and replace extension base under AngleWithNilReason, LengthWithNilReason, DistanceWithNilReason, MeasureWithNilReason, VelocityWithNilReason and StringWithNilReason (EA GML transformation Issue 4) -->
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='AngleWithNilReason']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='AngleWithNilReasonType']/xs:complexContent">
		<xsl:element name='simpleContent' >
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='AngleWithNilReasonType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'gml:AngleType'"/>
			</xsl:attribute>
			<xsl:element name="attribute">
				<xsl:attribute name="name">
					<xsl:value-of select="'nilReason'"/>
				</xsl:attribute>
				<xsl:attribute name="type">
					<xsl:value-of select="'gml:NilReasonType'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='DistanceWithNilReason']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='DistanceWithNilReasonType']/xs:complexContent">
		<xsl:element name='simpleContent' >
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='DistanceWithNilReasonType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'gml:LengthType'"/>
			</xsl:attribute>
			<xsl:element name="attribute">
				<xsl:attribute name="name">
					<xsl:value-of select="'nilReason'"/>
				</xsl:attribute>
				<xsl:attribute name="type">
					<xsl:value-of select="'gml:NilReasonType'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='LengthWithNilReason']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='LengthWithNilReasonType']/xs:complexContent">
		<xsl:element name='simpleContent' >
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='LengthWithNilReasonType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'gml:LengthType'"/>
			</xsl:attribute>
			<xsl:element name="attribute">
				<xsl:attribute name="name">
					<xsl:value-of select="'nilReason'"/>
				</xsl:attribute>
				<xsl:attribute name="type">
					<xsl:value-of select="'gml:NilReasonType'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='MeasureWithNilReason']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='MeasureWithNilReasonType']/xs:complexContent">
		<xsl:element name='simpleContent' >
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='MeasureWithNilReasonType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'gml:MeasureType'"/>
			</xsl:attribute>
			<xsl:element name="attribute">
				<xsl:attribute name="name">
					<xsl:value-of select="'nilReason'"/>
				</xsl:attribute>
				<xsl:attribute name="type">
					<xsl:value-of select="'gml:NilReasonType'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='VelocityWithNilReason']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='VelocityWithNilReasonType']/xs:complexContent">
		<xsl:element name='simpleContent' >
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='VelocityWithNilReasonType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'gml:SpeedType'"/>
			</xsl:attribute>
			<xsl:element name="attribute">
				<xsl:attribute name="name">
					<xsl:value-of select="'nilReason'"/>
				</xsl:attribute>
				<xsl:attribute name="type">
					<xsl:value-of select="'gml:NilReasonType'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='StringWithNilReason']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='StringWithNilReasonType']/xs:complexContent">
		<xsl:element name='simpleContent' >
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='StringWithNilReasonType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'string'"/>
			</xsl:attribute>
			<xsl:element name="attribute">
				<xsl:attribute name="name">
					<xsl:value-of select="'nilReason'"/>
				</xsl:attribute>
				<xsl:attribute name="type">
					<xsl:value-of select="'gml:NilReasonType'"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:element>
	</xsl:template>

	<!-- Replace substitutionGroup and extension base of elements TropicalCycloneSIGMETEvolvingConditionCollection, VolcanicAshSIGMETEvolvingConditionCollection, TropicalCycloneSIGMETPositionCollection and VolcanicAshSIGMETPositionCollection -->
	<!--
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='TropicalCycloneSIGMETEvolvingConditionCollection' or @name='VolcanicAshSIGMETEvolvingConditionCollection']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:attribute name="substitutionGroup">
				<xsl:value-of select="'iwxxm:SIGMETEvolvingConditionCollection'"/>
			</xsl:attribute>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='TropicalCycloneSIGMETEvolvingConditionCollectionType' or @name='VolcanicAshSIGMETEvolvingConditionCollectionType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'iwxxm:SIGMETEvolvingConditionCollectionType'"/>
			</xsl:attribute>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:element[@name='TropicalCycloneSIGMETPositionCollection' or @name='VolcanicAshSIGMETPositionCollection']">
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select="@*[not(name() = 'substitutionGroup')]"/>
			<xsl:attribute name="substitutionGroup">
				<xsl:value-of select="'iwxxm:SIGMETPositionCollection'"/>
			</xsl:attribute>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='TropicalCycloneSIGMETPositionCollectionType' or @name='VolcanicAshSIGMETPositionCollectionType']/xs:complexContent/xs:extension">
		<xsl:element name='{local-name()}' >
			<xsl:attribute name="base">
				<xsl:value-of select="'iwxxm:SIGMETPositionCollectionType'"/>
			</xsl:attribute>
			<xsl:apply-templates />
		</xsl:element>
	</xsl:template>
	-->

	<!-- Remove empty sequence tags under SPECIType, METARType, AerodromeSurfaceWindForecastType, LengthWithNilReason and DistanceWithNilReason.  A possible EA implementation issue -->
	<!-- Update: This is probably correct, as indicated in ISO19136 documentation
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='SPECIType']/xs:complexContent/xs:extension/xs:sequence"/>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='METARType']/xs:complexContent/xs:extension/xs:sequence"/>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='AerodromeSurfaceWindForecastType']/xs:complexContent/xs:extension/xs:sequence"/>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='DistanceWithNilReasonType']/xs:complexContent/xs:extension/xs:sequence"/>
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:complexType[@name='LengthWithNilReasonType']/xs:complexContent/xs:extension/xs:sequence"/>
	-->

	<!-- Additional imports required for common.xsd (EA will not import a schema if none of its elements/types is referenced) -->
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:schema/xs:import[1]">
		<!-- Import for localized AIXM property types to reference the AIXM schemas.  Make sure that the schema involved is common.xsd -->
		<xsl:if xmlns:xs="http://www.w3.org/2001/XMLSchema" test="../xs:element[@name='Report']">
			<xsl:element name='import' >
				<xsl:attribute name="namespace">
					<xsl:value-of select="'http://www.aixm.aero/schema/5.1.1'"/>
				</xsl:attribute>
				<xsl:attribute name="schemaLocation">
					<!-- <xsl:value-of select="'http://www.aixm.aero/schema/5.1.1_profiles/AIXM_WX/5.1.1b/AIXM_Features.xsd'"/> -->
					<xsl:value-of select="'http://www.aixm.aero/schema/5.1.1/AIXM_Features.xsd'"/>
				</xsl:attribute>
				<xsl:apply-templates />
			</xsl:element>
		</xsl:if>
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select='namespace::*[not(. = namespace-uri(current()))]' />
			<xsl:apply-templates select='@*|node()' />
		</xsl:element>
	</xsl:template>
	<!-- Not working in EA12.1
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:schema">
		<xsl:element name='{local-name()}'>
			<xsl:if xmlns:xs="http://www.w3.org/2001/XMLSchema" test="./xs:element[@name='Report']">
				<xsl:namespace name="aixm" select="'http://www.aixm.aero/schema/5.1.1'"/>
			</xsl:if>
			<xsl:copy-of select='namespace::*[not(. = namespace-uri(current()))]' />
			<xsl:apply-templates select='@*|node()' />
		</xsl:element>
	</xsl:template>
	-->

	<!-- Insert complex types to common.xsd which cannot be handled by UML -->
	<xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema" match="xs:schema/*[last()]">
		<xsl:param name="name"/>
		<xsl:param name="base"/>
		<xsl:param name="ref"/>
		<xsl:element name='{local-name()}' >
			<xsl:copy-of select='namespace::*[not(. = namespace-uri(current()))]' />
			<xsl:apply-templates select='@*|node()' />
		</xsl:element>

		<!-- Make sure that the schema involved is common.xsd -->
		<xsl:if xmlns:xs="http://www.w3.org/2001/XMLSchema" test="../xs:element[@name='Report']">

			<!-- Insert IWXXM property types to common.xsd to get around with AIXM's broken property types -->
			<xsl:call-template name="propertyType">
				<xsl:with-param name="name" select="'UnitPropertyType'"/>
				<xsl:with-param name="base" select="'aixm:AbstractAIXMFeatureType'"/>
				<xsl:with-param name="ref" select="'aixm:Unit'"/>
			</xsl:call-template>
			<xsl:call-template name="propertyType">
				<xsl:with-param name="name" select="'AirspacePropertyType'"/>
				<xsl:with-param name="base" select="'aixm:AbstractAIXMFeatureType'"/>
				<xsl:with-param name="ref" select="'aixm:Airspace'"/>
			</xsl:call-template>
			<xsl:call-template name="propertyType">
				<xsl:with-param name="name" select="'AirspaceLayerPropertyType'"/>
				<xsl:with-param name="base" select="'aixm:AbstractAIXMFeatureType'"/>
				<xsl:with-param name="ref" select="'aixm:AirspaceLayer'"/>
			</xsl:call-template>
			<xsl:call-template name="propertyType">
				<xsl:with-param name="name" select="'AirspaceVolumePropertyType'"/>
				<xsl:with-param name="base" select="'aixm:AbstractAIXMFeatureType'"/>
				<xsl:with-param name="ref" select="'aixm:AirspaceVolume'"/>
			</xsl:call-template>
			<xsl:call-template name="propertyType">
				<xsl:with-param name="name" select="'AirportHeliportPropertyType'"/>
				<xsl:with-param name="base" select="'aixm:AbstractAIXMFeatureType'"/>
				<xsl:with-param name="ref" select="'aixm:AirportHeliport'"/>
			</xsl:call-template>
			<xsl:call-template name="propertyType">
				<xsl:with-param name="name" select="'RunwayPropertyType'"/>
				<xsl:with-param name="base" select="'aixm:AbstractAIXMFeatureType'"/>
				<xsl:with-param name="ref" select="'aixm:Runway'"/>
			</xsl:call-template>
			<xsl:call-template name="propertyType">
				<xsl:with-param name="name" select="'RunwayDirectionPropertyType'"/>
				<xsl:with-param name="base" select="'aixm:AbstractAIXMFeatureType'"/>
				<xsl:with-param name="ref" select="'aixm:RunwayDirection'"/>
			</xsl:call-template>

			<!-- Insert "ValDistanceVerticalType" to get around with AIXM's problematic nilReason -->
			<xsl:element name="complexType">
				<xsl:attribute name="name">
					<xsl:value-of select="'ValDistanceVerticalType'"/>
				</xsl:attribute>
				<xsl:element name="simpleContent">
					<xsl:element name="extension">
						<xsl:attribute name="base">
							<xsl:value-of select="'aixm:ValDistanceVerticalBaseType'"/>
						</xsl:attribute>
						<xsl:element name="attribute">
							<xsl:attribute name="name">
								<xsl:value-of select="'uom'"/>
							</xsl:attribute>
							<xsl:attribute name="type">
								<xsl:value-of select="'aixm:UomDistanceVerticalType'"/>
							</xsl:attribute>
						</xsl:element>
						<xsl:element name="attribute">
							<xsl:attribute name="name">
								<xsl:value-of select="'nilReason'"/>
							</xsl:attribute>
							<xsl:attribute name="type">
								<xsl:value-of select="'gml:NilReasonType'"/>
							</xsl:attribute>
						</xsl:element>
					</xsl:element>
				</xsl:element>
			</xsl:element>

			<!-- Insert missing AbstractTimeObjectPropertyType of GML -->
			<xsl:element name="complexType">
				<xsl:attribute name="name">
					<xsl:value-of select="'AbstractTimeObjectPropertyType'"/>
				</xsl:attribute>
				<xsl:element name="sequence">
					<xsl:attribute name="minOccurs">
						<xsl:value-of select="0"/>
					</xsl:attribute>
					<xsl:element name="element">
						<xsl:attribute name="ref">
							<xsl:value-of select="'gml:AbstractTimeObject'"/>
						</xsl:attribute>
					</xsl:element>
				</xsl:element>
				<xsl:element name="attributeGroup">
					<xsl:attribute name="ref">
						<xsl:value-of select="'gml:AssociationAttributeGroup'"/>
					</xsl:attribute>
				</xsl:element>
			</xsl:element>

			<!-- Insert IWXXM extention type to common.xsd to ensure that extended content always has a web accessible schema definition -->
			<xsl:element name="complexType">
				<xsl:attribute name="name">
					<xsl:value-of select="'ExtensionType'"/>
				</xsl:attribute>
				<xsl:element name="sequence">
					<xsl:element name="any">
						<xsl:attribute name="processContents">
							<xsl:value-of select="'strict'"/>
						</xsl:attribute>
					</xsl:element>
				</xsl:element>
			</xsl:element>

		</xsl:if>
	
	</xsl:template>
	<xsl:template name="propertyType">
		<xsl:param name="name"/>
		<xsl:param name="base"/>
		<xsl:param name="ref"/>
		<xsl:element name="complexType">
			<xsl:attribute name="name">
				<xsl:value-of select="$name"/>
			</xsl:attribute>
			<!-- Extension based removed per Aaron-Choy discussion -->
			<!--
			<xsl:element name="complexContent">
				<xsl:element name="extension">
					<xsl:attribute name="base">
						<xsl:value-of select="$base"/>
					</xsl:attribute>
			-->
					<xsl:element name="sequence">
						<xsl:attribute name="minOccurs">
							<xsl:value-of select="0"/>
						</xsl:attribute>
						<xsl:element name="element">
							<xsl:attribute name="ref">
								<xsl:value-of select="$ref"/>
							</xsl:attribute>
						</xsl:element>
					</xsl:element>
					<xsl:element name="attributeGroup">
						<xsl:attribute name="ref">
							<xsl:value-of select="'gml:AssociationAttributeGroup'"/>
						</xsl:attribute>
					</xsl:element>
					<xsl:element name="attributeGroup">
						<xsl:attribute name="ref">
							<xsl:value-of select="'gml:OwnershipAttributeGroup'"/>
						</xsl:attribute>
					</xsl:element>
			<!--
				</xsl:element>
			</xsl:element>
			-->
		</xsl:element>
	</xsl:template>

	<!-- Attributes manipulation fragment from external XSLT AttributeNotesFromXMI_IWXXM.xslt -->
	<!-- Start -->
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='VolcanoType']//xs:sequence/xs:element[@name='name']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='VolcanoType']//xs:attribute[@name='name']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Name of the volcano.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RadiationIncidentType']//xs:sequence/xs:element[@name='siteName']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RadiationIncidentType']//xs:attribute[@name='siteName']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Incident location.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RadiationIncidentType']//xs:sequence/xs:element[@name='incidentTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RadiationIncidentType']//xs:attribute[@name='incidentTime']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Incident time.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='TropicalCycloneType']//xs:sequence/xs:element[@name='name']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='TropicalCycloneType']//xs:attribute[@name='name']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Name of the tropical cyclone.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:simpleType[@name='WorldAreaForecastCentreType']">
      <xsl:element name="element">
         <xsl:attribute name="name">
            <xsl:value-of select="'WorldAreaForecastCentre'"/>
         </xsl:attribute>
         <xsl:attribute name="type">
            <xsl:value-of select="'iwxxm:WorldAreaForecastCentreType'"/>
         </xsl:attribute>
      </xsl:element>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WorldAreaForecastCentreType']//xs:sequence/xs:element[@name='London']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WorldAreaForecastCentreType']//xs:attribute[@name='London']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The World Area Forecast Centre (WAFC) operated by the UK Met Office.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WorldAreaForecastCentreType']//xs:sequence/xs:element[@name='Washington']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WorldAreaForecastCentreType']//xs:attribute[@name='Washington']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The World Area Forecast Centre (WAFC) operated by the National Weather Service (NWS) in the USA.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:sequence/xs:element[@name='location']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:attribute[@name='location']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Position of the wind symbol.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:sequence/xs:element[@name='windSpeed']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:attribute[@name='windSpeed']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Horizontal wind speed at the indicated position.

Wind speeds shall be provided in unit of measurer "m/s" (meters per second).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:sequence/xs:element[@name='IsotachUpperElevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:attribute[@name='IsotachUpperElevation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the 80 knot isotach above the jet stream measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:sequence/xs:element[@name='IsotachUpperVerticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:attribute[@name='IsotachUpperVerticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:sequence/xs:element[@name='IsotachLowerElevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:attribute[@name='IsotachLowerElevation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the 80 knot isotach below the jet stream measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:sequence/xs:element[@name='IsotachLowerVerticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSJetStreamWindSymbolType']//xs:attribute[@name='IsotachLowerVerticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WAFSSignificantWeatherForecastType']//xs:sequence">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="element">
            <xsl:attribute name="name">
               <xsl:value-of select="'extension'"/>
            </xsl:attribute>
            <xsl:attribute name="type">
               <xsl:value-of select="'iwxxm:ExtensionType'"/>
            </xsl:attribute>
            <xsl:attribute name="minOccurs">
               <xsl:value-of select="'0'"/>
            </xsl:attribute>
            <xsl:attribute name="maxOccurs">
               <xsl:value-of select="'unbounded'"/>
            </xsl:attribute>
            <xsl:element name="annotation">
               <xsl:element name="documentation">
                  <xsl:value-of select="'Extension block for optional and/or additional parameters for element WAFSSignificantWeatherForecast'"/>
               </xsl:element>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:sequence/xs:element[@name='upperElevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:attribute[@name='upperElevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the upper surface measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:sequence/xs:element[@name='upperVerticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:attribute[@name='upperVerticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:sequence/xs:element[@name='upperInterpretation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:attribute[@name='upperInterpretation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating how a value needs to be interpreted when used as a filter or condition. For example: above the value or below the value. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:sequence/xs:element[@name='lowerElevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:attribute[@name='lowerElevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the lower surface measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:sequence/xs:element[@name='lowerVerticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:attribute[@name='lowerVerticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:sequence/xs:element[@name='lowerInterpretation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedVolumeType']//xs:attribute[@name='lowerInterpretation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating how a value needs to be interpreted when used as a filter or condition. For example: above the value or below the value. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='issueTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='issueTime']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The time the report is issued.

If this element is not inherited from the encapsulating iwxxm:MeteorologicalFeatureCollection this element shall be present.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='originatingCentre']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='originatingCentre']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Institution that creates the reports.

If this element is not inherited from the encapsulating iwxxm:MeteorologicalFeatureCollection this element shall be present.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='phenomenonBaseTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='phenomenonBaseTime']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The data time of the forecast, usually provided to identify different sets of numerical weather prediction product.

To be used in conjunction with iwxxm:phenomenonTime when iwxxm:phenomenonCategory="weatherForecasts" 

If this element is not inherited from the encapsulating iwxxm:MeteorologicalFeatureCollection this element shall be present.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='phenomenonCategory']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='phenomenonCategory']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The category of the meteorological phenomenon which is either weatherObservations or weatherForecasts.

If this element is not inherited from the encapsulating iwxxm:MeteorologicalFeatureCollection this element shall be present.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='phenomenonTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='phenomenonTime']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The time instant or period during which the indicated meteorological phenomenon occurred or is expected to occur.

When iwxxm:phenomenonCategory="weatherObservations" it is the observation time of the phenomenon.

When iwxxm:phenomenonCategory="weatherForecasts" it is the forecast time of the phenomenon.

If this element is not inherited from the encapsulating iwxxm:MeteorologicalFeatureCollection this element shall be present.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='phenomenon']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='phenomenon']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The meteorological phenomenon mentioned in the report.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='phenomenonGeometry']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='phenomenonGeometry']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Geometry of the meteorological phenomenon.

The actual featureType to be used in describing the geometry shall be constraint by iwxxm:phenomenonCategory and iwxxm:phenomenon.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:sequence/xs:element[@name='phenomenonProperty']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureType']//xs:attribute[@name='phenomenonProperty']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Properties of the meteorological phenomenon.

The actual featureType to be used in describing the properties shall be constraint by iwxxm:phenomenonCategory and iwxxm:phenomenon.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedSurfaceType']//xs:sequence/xs:element[@name='elevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedSurfaceType']//xs:attribute[@name='elevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the surface measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedSurfaceType']//xs:sequence/xs:element[@name='verticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedSurfaceType']//xs:attribute[@name='verticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedSurfaceType']//xs:sequence/xs:element[@name='interpretation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedSurfaceType']//xs:attribute[@name='interpretation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating how a value needs to be interpreted when used as a filter or condition. For example: above the value or below the value.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='boundingPeriod']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='boundingPeriod']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The period covering all of the phenomena mentioned in the collective.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='boundingVolume']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='boundingVolume']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The volume containing all of the phenomena mentioned in the collective during the bounding period.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='phenomenaList']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='phenomenaList']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">List of meteorological phenomena involved in the collection.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='issueTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='issueTime']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The time the collective is issued.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='originatingCentre']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='originatingCentre']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Institution that creates the reports.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='phenomenonCategory']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='phenomenonCategory']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The category of the meteorological phenomenon which is either weatherObservations or weatherForecasts.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='phenomenonBaseTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='phenomenonBaseTime']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The data time of the forecast, usually provided to identify different sets of numerical weather prediction product.

To be used in conjunction with iwxxm:phenomenonTime when iwxxm:phenomenonCategory="weatherForecasts" 

If this element is not inherited from the encapsulating iwxxm:MeteorologicalFeatureCollection this element shall be present.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:sequence/xs:element[@name='phenomenonTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='MeteorologicalFeatureCollectionType']//xs:attribute[@name='phenomenonTime']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The time instant or period during which the indicated meteorological phenomenon occurred or is expected to occur.

When iwxxm:phenomenonCategory="weatherObservations" it is the observation time of the phenomenon.

When iwxxm:phenomenonCategory="weatherForecasts" it is the forecast time of the phenomenon.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:sequence/xs:element[@name='upperElevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:attribute[@name='upperElevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the upper surface measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:sequence/xs:element[@name='upperVerticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:attribute[@name='upperVerticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:sequence/xs:element[@name='lowerElevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:attribute[@name='lowerElevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the lower surface measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:sequence/xs:element[@name='lowerVerticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedEnvelopeType']//xs:attribute[@name='lowerVerticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedPointType']//xs:sequence/xs:element[@name='elevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedPointType']//xs:attribute[@name='elevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the point measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedPointType']//xs:sequence/xs:element[@name='verticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedPointType']//xs:attribute[@name='verticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedPointType']//xs:sequence/xs:element[@name='interpretation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedPointType']//xs:attribute[@name='interpretation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating how a value needs to be interpreted when used as a filter or condition. For example: above the value or below the value. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedCurveType']//xs:sequence/xs:element[@name='elevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedCurveType']//xs:attribute[@name='elevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the curve measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedCurveType']//xs:sequence/xs:element[@name='verticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedCurveType']//xs:attribute[@name='verticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedCurveType']//xs:sequence/xs:element[@name='interpretation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedCurveType']//xs:attribute[@name='interpretation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating how a value needs to be interpreted when used as a filter or condition. For example: above the value or below the value. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedLevelType']//xs:sequence/xs:element[@name='elevation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedLevelType']//xs:attribute[@name='elevation']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical distance of the curve measured from Mean Sea Level (MSL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedLevelType']//xs:sequence/xs:element[@name='verticalReference']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedLevelType']//xs:attribute[@name='verticalReference']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating the reference for a vertical distance. Two series of values exist: 1) real distance: from GND, from the MSL, from the WGS-84 ellipsoid; 2) distance based on a difference of pressures, according to the standard atmosphere.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedLevelType']//xs:sequence/xs:element[@name='interpretation']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ElevatedLevelType']//xs:attribute[@name='interpretation']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">A code indicating how a value needs to be interpreted when used as a filter or condition. For example: above the value or below the value. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WMOCategoryCodeType']//xs:sequence/xs:element[@name='weatherObservations']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WMOCategoryCodeType']//xs:attribute[@name='weatherObservations']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Weather Observations</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WMOCategoryCodeType']//xs:sequence/xs:element[@name='weatherForecasts']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='WMOCategoryCodeType']//xs:attribute[@name='weatherForecasts']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Weather Forecasts.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RelationalOperatorType']//xs:sequence/xs:element[@name='ABOVE']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RelationalOperatorType']//xs:attribute[@name='ABOVE']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The actual value is above the maximum value that can be determined by the system ("ABV", "P")</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RelationalOperatorType']//xs:sequence/xs:element[@name='BELOW']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='RelationalOperatorType']//xs:attribute[@name='BELOW']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The actual value is below the minimum value that can be determined by the system ("BLW", "M")</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='CloudLayerType']//xs:sequence">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="element">
            <xsl:attribute name="name">
               <xsl:value-of select="'extension'"/>
            </xsl:attribute>
            <xsl:attribute name="type">
               <xsl:value-of select="'iwxxm:ExtensionType'"/>
            </xsl:attribute>
            <xsl:attribute name="minOccurs">
               <xsl:value-of select="'0'"/>
            </xsl:attribute>
            <xsl:attribute name="maxOccurs">
               <xsl:value-of select="'unbounded'"/>
            </xsl:attribute>
            <xsl:element name="annotation">
               <xsl:element name="documentation">
                  <xsl:value-of select="'Extension block for optional and/or additional parameters for element CloudLayer'"/>
               </xsl:element>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='CloudLayerType']//xs:sequence/xs:element[@name='amount']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='CloudLayerType']//xs:attribute[@name='amount']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The observed cloud amount</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='CloudLayerType']//xs:sequence/xs:element[@name='base']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='CloudLayerType']//xs:attribute[@name='base']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">For a given cloud or cloud layer, height of the lowest level in the atmosphere at which the air contains a perceptible quantity of cloud particles.

Measured cloud bases shall be reported in meters ("m") or feet ("[ft_i]").</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='CloudLayerType']//xs:sequence/xs:element[@name='cloudType']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='CloudLayerType']//xs:attribute[@name='cloudType']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The observed significant cloud types: cumulonimbus or towering cumulus</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportStatusType']//xs:sequence/xs:element[@name='NORMAL']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportStatusType']//xs:attribute[@name='NORMAL']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The first issuance of a report. </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportStatusType']//xs:sequence/xs:element[@name='AMENDMENT']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportStatusType']//xs:attribute[@name='AMENDMENT']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The report is an amendment to a previously issued report.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportStatusType']//xs:sequence/xs:element[@name='CORRECTION']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportStatusType']//xs:attribute[@name='CORRECTION']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The report is a correction to a previously issued report.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:sequence/xs:element[@name='translatedBulletinID']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:attribute[@name='translatedBulletinID']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The TAC bulletin ID that was translated, of the form 'TTAAiiCCCYYGGgg'</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:sequence/xs:element[@name='translatedBulletinReceptionTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:attribute[@name='translatedBulletinReceptionTime']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The time at which the translated TAC bulletin was received by the translation centre</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:sequence/xs:element[@name='translationCentreDesignator']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:attribute[@name='translationCentreDesignator']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The ICAO designator of the centre which performed translation from TAC to XML</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:sequence/xs:element[@name='translationCentreName']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:attribute[@name='translationCentreName']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The name of the translation centre which performed translation from TAC to XML</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:sequence/xs:element[@name='translationTime']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:attribute[@name='translationTime']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The time at which translation was performed from TAC to XML</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:sequence/xs:element[@name='translationFailedTAC']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='ReportType']//xs:attribute[@name='translationFailedTAC']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The full, original TAC that could not be translated.  When translation fails only the report type (i.e, SIGMET or METAR), translation information and other basic report metadata should be provided.  In this case no translated content will be included other than the original TAC.  Translation is considered to have failed when either not all of the TAC could be understood by the translation software or not all of the mandatory TAC content could be found.  Permissible usage may be set as normal and TAC that failed translation may still be used for operational purposes, but under no circumstances should partially translated content be distributed or marked as operational</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:sequence/xs:element[@name='reportStatus']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:attribute[@name='reportStatus']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The issuance status of the report.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:sequence/xs:element[@name='permissibleUsage']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:attribute[@name='permissibleUsage']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The permissible usage of this report (OPERATIONAL or NON-OPERATIONAL).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:sequence/xs:element[@name='permissibleUsageReason']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:attribute[@name='permissibleUsageReason']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The permissible usage reason of this report. Only populated when the permissible usage is NON-OPERATIONAL.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:sequence/xs:element[@name='permissibleUsageSupplementary']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='BasicReportType']//xs:attribute[@name='permissibleUsageSupplementary']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Additional human-readable descriptive information regarding the permissible usage.  Only populated when the permissible usage is NON-OPERATIONAL.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeCloudForecastType']//xs:sequence">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="element">
            <xsl:attribute name="name">
               <xsl:value-of select="'extension'"/>
            </xsl:attribute>
            <xsl:attribute name="type">
               <xsl:value-of select="'iwxxm:ExtensionType'"/>
            </xsl:attribute>
            <xsl:attribute name="minOccurs">
               <xsl:value-of select="'0'"/>
            </xsl:attribute>
            <xsl:attribute name="maxOccurs">
               <xsl:value-of select="'unbounded'"/>
            </xsl:attribute>
            <xsl:element name="annotation">
               <xsl:element name="documentation">
                  <xsl:value-of select="'Extension block for optional and/or additional parameters for element AerodromeCloudForecast'"/>
               </xsl:element>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeCloudForecastType']//xs:sequence/xs:element[@name='verticalVisibility']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:attribute name="nillable">
            <xsl:value-of select="'true'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeCloudForecastType']//xs:attribute[@name='verticalVisibility']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The vertical visibility.  Vertical visibility is defined as the vertical visual range into an obscuring medium.

Vertical visibility shall be reported either in meters ("m") or feet ("[ft_i]").
</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageType']//xs:sequence/xs:element[@name='OPERATIONAL']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageType']//xs:attribute[@name='OPERATIONAL']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Data may be used for operational purposes</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageType']//xs:sequence/xs:element[@name='NON-OPERATIONAL']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageType']//xs:attribute[@name='NON-OPERATIONAL']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Data should not be used for operational purposes, but may be used for other purposes</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='TimeIndicatorType']//xs:sequence/xs:element[@name='OBSERVATION']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='TimeIndicatorType']//xs:attribute[@name='OBSERVATION']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The information is observed</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='TimeIndicatorType']//xs:sequence/xs:element[@name='FORECAST']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='TimeIndicatorType']//xs:attribute[@name='FORECAST']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The information is predicated or estimated to occur at some point in the future</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindForecastType']//xs:sequence/xs:element[@name='variableWindDirection']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindForecastType']//xs:attribute[@name='variableWindDirection']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Indicates variable wind direction.  Cannot be reported with a mean wind direction</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:sequence">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="element">
            <xsl:attribute name="name">
               <xsl:value-of select="'extension'"/>
            </xsl:attribute>
            <xsl:attribute name="type">
               <xsl:value-of select="'iwxxm:ExtensionType'"/>
            </xsl:attribute>
            <xsl:attribute name="minOccurs">
               <xsl:value-of select="'0'"/>
            </xsl:attribute>
            <xsl:attribute name="maxOccurs">
               <xsl:value-of select="'unbounded'"/>
            </xsl:attribute>
            <xsl:element name="annotation">
               <xsl:element name="documentation">
                  <xsl:value-of select="'Extension block for optional and/or additional parameters for element AerodromeSurfaceWindTrendForecast'"/>
               </xsl:element>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:sequence/xs:element[@name='meanWindDirection']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:attribute[@name='meanWindDirection']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The forecast average wind direction from which wind is blowing.

Wind direction shall be given in degrees from true North. Plane angle unit of measure (uom) is "deg".  A true north wind is indicated with a direction of 360. Calm wind is indicated with a direction of 0.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:sequence/xs:element[@name='meanWindSpeed']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:attribute[@name='meanWindSpeed']">
      <xsl:element name="{local-name()}">
         <xsl:attribute name="use">
            <xsl:value-of select="'required'"/>
         </xsl:attribute>
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">The forecast average wind speed.

Wind speeds shall be provided in either two units of measures: "m/s" or "[kn_i]" (knot).</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:sequence/xs:element[@name='meanWindSpeedOperator']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:attribute[@name='meanWindSpeedOperator']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Indication that the mean wind speed is above or below the reported value.  To report a wind speed of at least 49 meters per second, wind speed is reported as 49 meters per second and the operator is reported as "above".

When no operator is reported, wind speed is an exact value with identical semantics to other measured quantities.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:sequence/xs:element[@name='windGustSpeed']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:attribute[@name='windGustSpeed']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Forecast variations from the mean wind speed (gusts).

Wind gusts shall be provided in either two units of measures: "m/s" or "[kn_i]" (knot).
</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:sequence/xs:element[@name='windGustSpeedOperator']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='AerodromeSurfaceWindTrendForecastType']//xs:attribute[@name='windGustSpeedOperator']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Indication that the wind gust speed is above or below the reported value.  To report a wind gust speed of at least 49 meters per second, wind gust speed is reported as 49 meters per second and the operator is reported as "above".

When no operator is reported, wind gust speed is an exact value with identical semantics to other measured quantities.</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageReasonType']//xs:sequence/xs:element[@name='TEST']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageReasonType']//xs:attribute[@name='TEST']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Data is part of a test activity and should not be used for operational purposes.  This may include circumstances such as issuing a single message to assess a new data network path, or as part of a more organized test of message distribution/availability such as a regional SIGMET test</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageReasonType']//xs:sequence/xs:element[@name='EXERCISE']">
      <xsl:param name="typeName" select="@type"/>
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
      </xsl:element>
   </xsl:template>
   <xsl:template xmlns:xs="http://www.w3.org/2001/XMLSchema"
                 match="xs:complexType[@name='PermissibleUsageReasonType']//xs:attribute[@name='EXERCISE']">
      <xsl:element name="{local-name()}">
         <xsl:apply-templates select="@*|node()"/>
         <xsl:element name="annotation">
            <xsl:element name="documentation">Data is part of a test exercise and should not be used for operational purposes.  This may include circumstances where realistic data is issued to be used in organized exercises where users will practice or train for potential scenarios.  For example, VA SIGMET exercises may include realistic data which is intended to be considered by users participating in the exercise but is not intended for operational use</xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>
	<!-- End -->

</xsl:stylesheet>
